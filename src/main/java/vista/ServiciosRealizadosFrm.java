/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import clases.Empleado;
import clases.OrdenTrabajo;
import clases.Servicio;
import clases.ServiciosRealizados;
import control.ControlEmpleado;
import control.ControlServicio;
import control.ControlOrdenTrabajo;
import control.ControlServiciosRealizados;
import gestion.GestionServiciosRealizados;
import gestion.GestionServiciosHasServiciosRealizados;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author teenc
 */
public class ServiciosRealizadosFrm extends javax.swing.JInternalFrame {

    /**
     * Creates new form ServiciosRealizadosFrm
     */
    ControlEmpleado ce = new ControlEmpleado();
    ControlOrdenTrabajo cot = new ControlOrdenTrabajo();
    ControlServicio cs = new ControlServicio();
    GestionServiciosRealizados gsr = new GestionServiciosRealizados();
    GestionServiciosHasServiciosRealizados gshsr = new GestionServiciosHasServiciosRealizados();
    ControlServiciosRealizados csr = new ControlServiciosRealizados();
    DefaultTableModel tablaServicio;
    Servicio s = null;
    OrdenTrabajo ot = null;
    Empleado em = null;
    ServiciosRealizados sr = null;
    ArrayList<Servicio> lista = new ArrayList<>();

    public ServiciosRealizadosFrm() {
        initComponents();
        listarEmpleados();
        listaServicios();
        listarOrdenes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblEmpleado = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSerRealizados = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cbxServicios = new javax.swing.JComboBox<>();
        lblServicios = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnAgrgar = new javax.swing.JButton();
        cbxEmpleado = new javax.swing.JComboBox<>();
        cbxOrdenTrabajo = new javax.swing.JComboBox<>();
        lblNombreEmpleado = new javax.swing.JLabel();
        lblComercioCliente = new javax.swing.JLabel();
        lblApellidoEmpleado = new javax.swing.JLabel();
        lblNombreCliente = new javax.swing.JLabel();

        setClosable(true);
        setPreferredSize(new java.awt.Dimension(545, 434));

        lblEmpleado.setText("Empleado");

        jLabel2.setText("Orden trabajo");

        jScrollPane1.setViewportView(tbSerRealizados);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        jLabel3.setText("ServicioRealizado");

        cbxServicios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxServiciosActionPerformed(evt);
            }
        });

        lblServicios.setText("jLabel4");

        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnAgrgar.setText("Agregar");
        btnAgrgar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgrgarActionPerformed(evt);
            }
        });

        cbxEmpleado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEmpleadoActionPerformed(evt);
            }
        });

        cbxOrdenTrabajo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxOrdenTrabajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxOrdenTrabajoActionPerformed(evt);
            }
        });

        lblNombreEmpleado.setText("jLabel5");

        lblComercioCliente.setText("jLabel5");

        lblApellidoEmpleado.setText("jLabel4");

        lblNombreCliente.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(cbxServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(cbxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(cbxOrdenTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblComercioCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNombreEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblApellidoEmpleado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAgrgar)
                                .addGap(18, 18, 18)
                                .addComponent(btnLimpiar)))
                        .addGap(0, 56, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(btnNuevo)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpleado)
                    .addComponent(cbxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombreEmpleado)
                    .addComponent(lblApellidoEmpleado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbxOrdenTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblComercioCliente)
                    .addComponent(lblNombreCliente))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbxServicios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblServicios)
                    .addComponent(btnAgrgar)
                    .addComponent(btnLimpiar))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnEliminar)
                    .addComponent(btnNuevo))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbxEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEmpleadoActionPerformed
        nombreEmpleadoLbl();
    }//GEN-LAST:event_cbxEmpleadoActionPerformed

    private void cbxOrdenTrabajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxOrdenTrabajoActionPerformed
        lblComercioCliente();
    }//GEN-LAST:event_cbxOrdenTrabajoActionPerformed

    private void cbxServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxServiciosActionPerformed
        nombreServicio();
    }//GEN-LAST:event_cbxServiciosActionPerformed

    private void btnAgrgarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgrgarActionPerformed
        try {
            s = cs.buscarServicio(cbxServicios.getSelectedItem().toString());
            lista.add(s);
            cargarTablaServicios(lista);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAgrgarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        restablecerFrm();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            lblEmpleado.setVisible(false);
            cbxEmpleado.setVisible(false);
            lblNombreEmpleado.setVisible(false);
            lblApellidoEmpleado.setVisible(false);

            cbxOrdenTrabajo.setEnabled(false);
            cbxServicios.setEnabled(false);

            btnNuevo.setEnabled(false);
            btnEliminar.setEnabled(true);
            btnAgrgar.setEnabled(false);

            buscarServicioRealizados();
        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizadosFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        try {

            if (validarVacio()) {

                JOptionPane.showMessageDialog(null, "Campos vacios, llene toda la informacion");
            } else {
                int alerta = alerta("creara");
                switch (alerta) {
                    case 0 -> {
                        nuevoServicioRealizado();
                        JOptionPane.showMessageDialog(null, "Se creo el registro correctamente");
                    }
                    case 1 -> {
                        break;
                    }
                    default ->
                        throw new AssertionError();
                }
            }

        } catch (HeadlessException ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
        restablecerFrm();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        try {

            if (validarVacio()) {

                JOptionPane.showMessageDialog(null, "Campos vacios, llene toda la informacion");
            } else {

                int alerta = alerta("ELIMINAR");

                switch (alerta) {
                    case 0 -> {
                        csr.eliminar(cbxOrdenTrabajo.getSelectedItem().toString());
                        JOptionPane.showMessageDialog(null, "Se elimino el registro");
                    }
                    case 1 -> {
                        break;
                    }
                    default ->
                        throw new AssertionError();
                }
            }

        } catch (HeadlessException ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
        restablecerFrm();
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgrgar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<String> cbxEmpleado;
    private javax.swing.JComboBox<String> cbxOrdenTrabajo;
    private javax.swing.JComboBox<String> cbxServicios;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApellidoEmpleado;
    private javax.swing.JLabel lblComercioCliente;
    private javax.swing.JLabel lblEmpleado;
    private javax.swing.JLabel lblNombreCliente;
    private javax.swing.JLabel lblNombreEmpleado;
    private javax.swing.JLabel lblServicios;
    private javax.swing.JTable tbSerRealizados;
    // End of variables declaration//GEN-END:variables

    public void listarEmpleados() {
        try {

            cbxEmpleado.removeAllItems();
            List<Empleado> listaEmp = ce.listarEmpleados();
            for (Empleado emp : listaEmp) {
                cbxEmpleado.addItem(emp.getIdentificacionPersona());
            }

        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void nombreEmpleadoLbl() {
        try {
            if (cbxEmpleado.getSelectedItem() != null) {
                em = ce.buscarEmpleado(cbxEmpleado.getSelectedItem().toString());
                lblNombreEmpleado.setText(em.getNombrePersona().toUpperCase());
                lblApellidoEmpleado.setText(em.getApellido().toUpperCase());
            }
        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void lblComercioCliente() {
        try {
            if (cbxOrdenTrabajo.getSelectedItem() != null) {
                ot = cot.buscar(cbxOrdenTrabajo.getSelectedItem().toString());
                lblComercioCliente.setText(ot.getUnidadCo().getNombreUnidadComercial().toUpperCase());
                lblNombreCliente.setText(ot.getUnidadCo().getcliente().getNombreCliente());
            }
        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void listaServicios() {
        try {
            cbxServicios.removeAllItems();
            List<Servicio> listaSer = cs.listaServicios();
            for (Servicio ser : listaSer) {
                cbxServicios.addItem(ser.getIdServicio());
            }
        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void nombreServicio() {
        try {
            if (cbxServicios.getSelectedItem() != null) {
                s = cs.buscarServicio(cbxServicios.getSelectedItem().toString());
                lblServicios.setText(s.getNombreServicio().toUpperCase());
            }
        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void listaServiciosRealizados() {
        try {
            s = cs.buscarServicio(cbxServicios.getSelectedItem().toString());
            lista.add(s);
            cargarTablaServicios(lista);
        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void cargarTablaServicios(List<Servicio> lista) {
        try {
            tablaServicio = new DefaultTableModel();
            String[] registro = new String[3];
            tablaServicio.addColumn("Id Servicio");
            tablaServicio.addColumn("Nombre");
            tablaServicio.addColumn("Descripcion");
            for (Servicio ser : lista) {
                registro[0] = ser.getIdServicio();
                registro[1] = ser.getNombreServicio();
                registro[2] = ser.getDescripcion();
                tablaServicio.addRow(registro);
            }
            tbSerRealizados.setModel(tablaServicio);
        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void limpiarTabla() {
        try {
            if (tablaServicio != null) {
                tbSerRealizados.getModel();
                tablaServicio.setRowCount(0);
                lista.clear();
            }
        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void buscarServicioRealizados() {

        List<List> lista = new ArrayList<>();

        try {
            Servicio sr = null;
            limpiarTabla();
            tablaServicio = new DefaultTableModel();
            lista = csr.buscar(cbxOrdenTrabajo.getSelectedItem().toString());
            String[] registro = new String[3];
            tablaServicio.addColumn("Nombre");
            tablaServicio.addColumn("Apellido");
            tablaServicio.addColumn("Servicio");
            for (List list : lista) {
                registro[0] = ce.buscarPorIdEmpleado(list.get(0).toString()).get(0);
                registro[1] = ce.buscarPorIdEmpleado(list.get(0).toString()).get(1);
                sr = cs.buscarServicio(list.get(1).toString());
                registro[2] = sr.getNombreServicio();
                tablaServicio.addRow(registro);
            }
            tbSerRealizados.setModel(tablaServicio);

        } catch (Exception ex) {
            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public List<Servicio> listarSerRealNuevo() {
        List<Servicio> listaSR = new ArrayList<>();
        try {
            int rows = tablaServicio.getRowCount();
            for (int i = 0; i < rows; i++) {
                String idServicio = String.valueOf(tbSerRealizados.getValueAt(i, 0));
                String nombre = String.valueOf(tbSerRealizados.getValueAt(i, 1));
                String descripcion = String.valueOf(tbSerRealizados.getValueAt(i, 2));
                Servicio ser = new Servicio(idServicio, nombre, descripcion);
                listaSR.add(ser);
            }
        } catch (Exception ex) {
            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listaSR;
    }

    public void nuevoServicioRealizado() {
        try {
            em = ce.buscarEmpleado(cbxEmpleado.getSelectedItem().toString());
            ot = cot.buscar(cbxOrdenTrabajo.getSelectedItem().toString());
            List<Servicio> listars = listarSerRealNuevo();
            sr = new ServiciosRealizados("", em, ot, (ArrayList<Servicio>) listars);
            csr.nuevo(sr);
        } catch (Exception ex) {
            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean validarVacio() {

        return cbxEmpleado.getSelectedItem().equals("") || cbxOrdenTrabajo.getSelectedItem().equals("") || tbSerRealizados.getRowCount() == 0;

    }

    public int alerta(String accion) {

        //Alerta con la informacion del registro que se alterara
        return JOptionPane.showConfirmDialog(null,
                "Se " + accion + " el registro : " + cbxOrdenTrabajo.getSelectedItem().toString().toLowerCase() + "\n"
                + " del empleado : " + lblNombreEmpleado.getText().toLowerCase() + "\n"
                + " de la unidad : " + lblComercioCliente.getText().toLowerCase(),
                "Confirmacion", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
    }

    public void listarOrdenes() {
        try {

            cbxOrdenTrabajo.removeAllItems();
            List<String> listaOrden = cot.listarOrdenes();
            for (String ot : listaOrden) {
                cbxOrdenTrabajo.addItem(ot);
            }

        } catch (Exception ex) {

            Logger.getLogger(ServiciosRealizados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void restablecerFrm() {

        limpiarTabla();
        lblEmpleado.setVisible(true);
        cbxEmpleado.setVisible(true);
        lblNombreEmpleado.setVisible(true);
        lblApellidoEmpleado.setVisible(true);
        btnNuevo.setEnabled(true);
        btnBuscar.setEnabled(true);
        btnEliminar.setEnabled(false);
        cbxOrdenTrabajo.setEnabled(true);
        cbxServicios.setEnabled(true);
        btnAgrgar.setEnabled(true);

    }
}
