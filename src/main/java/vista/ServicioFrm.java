/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import clases.Servicio;
import control.ControlServicio;
import java.awt.HeadlessException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author teenc
 */
public class ServicioFrm extends javax.swing.JInternalFrame {

    /**
     * Creates new form ServicioFrm
     */
    //Se importan las clases necesarias
    Servicio s = null;
    control.ControlServicio cs = new ControlServicio();

    public ServicioFrm() {
        //Se inician componentes
        initComponents();
        listarServiocios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtServicio = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        atxDetale = new javax.swing.JTextArea();
        btnBuscar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbServicios = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setClosable(true);

        jLabel2.setText("Servicio");

        jLabel3.setText("Detalle");

        atxDetale.setColumns(20);
        atxDetale.setLineWrap(true);
        atxDetale.setRows(5);
        atxDetale.setWrapStyleWord(true);
        jScrollPane1.setViewportView(atxDetale);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(tbServicios);

        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel1.setText("Id servicio");

        btnActualizar.setText("Actualizar");
        btnActualizar.setEnabled(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNuevo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnActualizar))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtServicio, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                                    .addComponent(txtId)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(btnLimpiar)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnNuevo)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Accion click en boton nuevo
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed

        //validamos casillas vacioas
        if (validarCasillasVacias()) {

            JOptionPane.showConfirmDialog(null, "Complete los campos");
        } else {

            //Se valida si el registro ya existe
            s = cs.buscarServicio(txtId.getText());
            if (s != null) {
                JOptionPane.showConfirmDialog(null, "Identificador ya existe");
            } else {

                //Se crea la clase para hacer consulta,
                s = new Servicio(txtId.getText(), txtServicio.getText(), atxDetale.getText());
                cs.nuevoServicio(s);
                //Se restablece el formulario
                limpiarFormulario();
                JOptionPane.showMessageDialog(null, "Regstro creado");
            }
        }

        //Actualizar listado
        listarServiocios();
    }//GEN-LAST:event_btnNuevoActionPerformed

    //Accion click en boton buscar
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        //Se validan casillas vacias
        if (txtId.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "Ingrese identificador valido");
        } else {

//            Se realiza la consulta y configuracion de seguridad del formulario
            buscarServicio();
            if (!buscarServicio()) {
                JOptionPane.showMessageDialog(null, "Registro no encontrado");
            } else {
                listarServiocios();
                btnEliminar.setEnabled(true);
                btnActualizar.setEnabled(true);
                btnNuevo.setEnabled(false);
                txtId.setEnabled(false);
            }
        }
        //Actualizar listado servicios
        listarServiocios();
    }//GEN-LAST:event_btnBuscarActionPerformed

    //Accion click en boton eliminar
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (validarCasillasVacias()) {
            JOptionPane.showMessageDialog(null, "Llene todas las casillas");
        } else {

            //Confirmacion alerta
            int confirmacion = alertaServicio("Eliminara");

            //Accion segun confirmacion
            switch (confirmacion) {
                case 0 -> {

                    //Se elimina el registro, se restablece formulario y mensaje 
                    eliminrServicio();
                    JOptionPane.showMessageDialog(null, "Se elimino el registro");
                }
                case 1 -> {
                    break;
                }
                default ->
                    throw new AssertionError();
            }
        }

        //Restablecer formulario y actualizar listado
        limpiarFormulario();
        listarServiocios();
    }//GEN-LAST:event_btnEliminarActionPerformed

    //Accion click en boton actualizar
    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        //Validar casillas vacion
        if (validarCasillasVacias()) {

            JOptionPane.showMessageDialog(null, "Llene todos los campos");
        } else {

            //Confirmacion alerta
            int alerta = alertaServicio("actualizara");

            //Accion segun alerta
            switch (alerta) {
                case 0 -> {

                    //Se realiza consulta, restablece formulario y mensaje
                    actualizarServicio();
                    JOptionPane.showMessageDialog(null, "Se actualizo el registro");
                }
                case 1 -> {
                    break;
                }
                default ->
                    throw new AssertionError();
            }
        }
        limpiarFormulario();
        listarServiocios();
    }//GEN-LAST:event_btnActualizarActionPerformed

    //Accion click boton limpiar
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarFormulario();
        listarServiocios();
    }//GEN-LAST:event_btnLimpiarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea atxDetale;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbServicios;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtServicio;
    // End of variables declaration//GEN-END:variables

    //Creacion listado servicios y expocision tabla
    private void listarServiocios() {
        try {

            //Se crea modelo tabla
            DefaultTableModel tServicios = new DefaultTableModel();
            //Se crea array para listad
            List<Servicio> lista;
            //Se crea encadezados de la tabla
            String[] registro = new String[3];
            tServicios.addColumn("Id Servicio");
            tServicios.addColumn("Servicio");
            tServicios.addColumn("Descripcion");
            //Se crea listado de registros
            lista = cs.listaServicios();
            //Se ingresa registro a la fila segun consulta
            for (Servicio sv : lista) {
                registro[0] = sv.getIdServicio();
                registro[1] = sv.getNombreServicio();
                registro[2] = sv.getDescripcion();
                //Se agregaan filas segun necesidad
                tServicios.addRow(registro);
            }

            //se envia modelo tabla a la tabla del formulario
            tbServicios.setModel(tServicios);
        } catch (Exception ex) {
            Logger.getLogger(ServicioFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Validar casillas vacios
    public boolean validarCasillasVacias() {

        return txtId.getText().equals("") || txtServicio.getText().equals("") || atxDetale.getText().equals("");
    }

    //Restablecer formulario
    public void limpiarFormulario() {

        //Se vacian casillas
        txtId.setText("");
        txtServicio.setText("");
        atxDetale.setText("");

        //Se habilitan/Deshabilitan casillas
        txtId.setEnabled(true);
        txtServicio.setEnabled(true);
        btnActualizar.setEnabled(false);
        btnBuscar.setEnabled(true);
        btnEliminar.setEnabled(false);
        btnNuevo.setEnabled(true);

    }

    //Alerta de confirmacion
    public int alertaServicio(String accion) {

        return JOptionPane.showConfirmDialog(null, "Se " + accion + " el registro :" + "\n"
                + " Id Servicio: " + txtId.getText() + "\n"
                + "Nombre: " + txtServicio.getText() + "\n",
                "COnfirmacion", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);

    }

    //Funcion nuevo registro
    public void nuevoServicio() {
        try {

            //Se crea la clase
            s = new Servicio(txtId.getText().toLowerCase(), txtServicio.getText().toLowerCase(),
                    atxDetale.getText().toLowerCase());

            //Se envia consulta
            cs.nuevoServicio(s);
        } catch (Exception ex) {

            Logger.getLogger(ServicioFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Funcion buscar registro
    public boolean buscarServicio() {
        try {

            //Se realiza consulta
            s = cs.buscarServicio(txtId.getText());

            //Decision segun respuesta de la consulta
            if (s != null) {
                //Se envia informacion al formulario segun resultado
                txtId.setText(s.getIdServicio());
                txtServicio.setText(s.getNombreServicio());
                atxDetale.setText(s.getDescripcion());
                return true;
            }
        } catch (HeadlessException ex) {

            Logger.getLogger(ServicioFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    //Funcion eliminar registro
    public void eliminrServicio() {
        try {

            //Se realiza consulta
            cs.eliminarServicio(txtId.getText());

        } catch (Exception ex) {

            Logger.getLogger(ServicioFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Funcion actualizar regostros
    public void actualizarServicio() {
        try {

            //Se crea clase de registro
            s = new Servicio(txtId.getText().toLowerCase(), txtServicio.getText().toLowerCase(),
                    atxDetale.getText().toLowerCase());

            //Se realiza consulta
            cs.actualizarServicio(s);
        } catch (Exception ex) {

            Logger.getLogger(ServicioFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
